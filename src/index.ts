import * as ts from "typescript";
import { PluginImpl } from "rollup";
import { getCachedCompiler, CompileMode } from "./compiler";
import { version } from "../package.json";

export interface Options {
  tsconfig?: string;
  compilerOptions?: ts.CompilerOptions;
  compileMode?: CompileMode;
  banner?: boolean;
}

const TSLIB_ID = "\0tslib";

const BANNER =
  `
// FILE GENERATED BY \`rollup-plugin-dts@${version}\`
// https://github.com/Swatinem/rollup-plugin-dts
`.trim() + "\n";

const plugin: PluginImpl<Options> = (options = {}) => {
  const tslibFileName = require.resolve("tslib").replace("tslib.js", "tslib.es6.js");
  const tslib = ts.sys.readFile(tslibFileName, "utf-8") || null;

  const mode = options.compileMode || CompileMode.Types;
  const compiler = getCachedCompiler({
    tsconfig: options.tsconfig || process.cwd(),
    compilerOptions: options.compilerOptions || {},
    mode,
  });

  return {
    name: "dts",

    banner: mode === CompileMode.Types && options.banner !== false ? BANNER : undefined,

    outputOptions(options) {
      if (mode === CompileMode.Js) {
        return options;
      }
      return {
        ...options,
        format: "es",
        exports: "named",
        compact: false,
        freeze: false,
        interop: false,
        namespaceToStringTag: false,
        strict: false,
      };
    },

    resolveId(importee, importer) {
      // istanbul ignore if
      if (importee === "tslib") {
        return TSLIB_ID;
      }
      if (!importer) {
        return;
      }
      importer = importer.split("\\").join("/");
      return compiler.resolve(importee, importer);
    },

    async load(id) {
      if (id === TSLIB_ID) {
        return tslib;
      }
      if (id.endsWith(".ts") || id.endsWith(".tsx")) {
        return compiler.load(id);
      }
      return null;
    },

    // TODO: figure out if we could use this to "fix" namespace-re-exports
    // renderChunk(code, chunk) {
    //   const { exports, imports, modules } = chunk;
    //   console.log({ code, exports, imports });
    //   console.log(modules);
    //   return null;
    // },
  };
};

const dts: PluginImpl<Options> = (options = {}) => {
  options.compileMode = options.compileMode || CompileMode.Types;
  return plugin(options);
};

const js: PluginImpl<Options> = (options = {}) => {
  options.compileMode = options.compileMode || CompileMode.Js;
  return plugin(options);
};

export { CompileMode, plugin, dts, js, js as ts };

export default plugin;
