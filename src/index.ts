import * as ts from "typescript";
import { Plugin } from "rollup";
// @ts-ignore
import { createFilter } from "rollup-pluginutils";
import { getCachedCompiler, CompileMode } from "./compiler";
import { version } from "../package.json";

interface Options {
  include?: Array<string>;
  exclude?: Array<string>;
  tsconfig?: string;
  compilerOptions?: ts.CompilerOptions;
  compileMode?: CompileMode;
}

const TSLIB_ID = "\0tslib";

const BANNER =
  `
// FILE GENERATED BY \`rollup-plugin-dts@${version}\`
// https://github.com/Swatinem/rollup-plugin-dts
`.trim() + "\n";

function plugin(options: Options = {}): Plugin {
  const filter = createFilter(options.include || ["*.ts+(|x)", "**/*.ts+(|x)"], options.exclude || []);

  const tslibFileName = require.resolve("tslib").replace("tslib.js", "tslib.es6.js");
  const tslib = ts.sys.readFile(tslibFileName, "utf-8");

  const mode = options.compileMode || CompileMode.Types;
  const compiler = getCachedCompiler({
    tsconfig: options.tsconfig || process.cwd(),
    compilerOptions: options.compilerOptions || {},
    mode,
  });

  return {
    name: "dts",

    banner: mode === CompileMode.Types ? BANNER : undefined,

    resolveId(importee, importer) {
      // istanbul ignore if
      if (importee === "tslib") {
        return TSLIB_ID;
      }
      if (!importer) {
        return null;
      }
      importer = importer.split("\\").join("/");
      return compiler.resolve(importee, importer);
    },

    load(id) {
      // istanbul ignore next
      return id === TSLIB_ID ? tslib : undefined;
    },

    async transform(code, id) {
      // istanbul ignore if
      if (!filter(id)) {
        return;
      }
      return compiler.transform(code, id);
    },
  };
}

function dts(options: Options = {}) {
  options.compileMode = options.compileMode || CompileMode.Types;
  return plugin(options);
}

function js(options: Options = {}) {
  options.compileMode = options.compileMode || CompileMode.Js;
  return plugin(options);
}

export { CompileMode, plugin, dts, js, js as ts };

export default plugin;
